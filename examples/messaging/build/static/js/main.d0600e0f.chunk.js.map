{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","URLSearchParams","window","location","search","get","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","width","onResize","parentWidth","setState","chatClient","StreamChat","setUser","id","react_default","a","createElement","Grid","container","direction","esm","handleWidth","handleHeight","index_es","client","concat","List","ChannelListMessenger","Preview","ChannelPreviewMessenger","filters","type","sort","last_message_at","updated_at","cid","options","watch","presence","Paginator","assign","threshold","TypingIndicator","Input","MessageInputFlat","focus","Message","MessageSimple","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTA2BMA,iBAHY,IAAIC,gBAAgBC,OAAOC,SAASC,QAG9BC,IAAI,UAAY,SA2EzBC,cAjEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAJRQ,MAAQ,CACNC,OAAQ,GAESR,EAcnBS,SAAW,SAACC,GACVV,EAAKW,SAAS,CACZH,MAAOE,KAdTV,EAAKY,WAAa,IAAIC,IAAW,gBAIjCb,EAAKY,WAAWE,QACd,CACEC,GAAI,gBAEN,wHAVef,wEA6BjB,OACEgB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAW,UACzBL,EAAAC,EAAAC,cAACC,EAAA,EAAD,eAGAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,aAGAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAqBC,aAAW,EAACC,cAAY,EAACf,SAAUN,KAAKM,WAC7DO,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,OAAQvB,KAAKS,WAAYpB,MAAK,aAAAmC,OAAenC,IACjDwB,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEG,KAAMC,IACNC,QAASC,IACTC,QAtBM,CAAEC,KAAM,aAuBdC,KAtBG,CACXC,iBAAkB,EAClBC,YAAa,EACbC,IAAK,GAoBGC,QAlBM,CAAE/B,OAAO,EAAMgC,OAAO,EAAMC,UAAU,GAmB5CC,UAAW,SAAC1C,GAAD,OACTiB,EAAAC,EAAAC,cAACO,EAAA,EAADxB,OAAAyC,OAAA,CAAyBC,UAAW,KAAS5C,OAGjDiB,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACO,EAAA,EAAD,MACAT,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAamB,gBAAiBA,MAC9B5B,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAcoB,MAAOC,IAAkBC,OAAK,KAE9C/B,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQuB,QAASC,iBA5DbC,aCrBEC,QACU,cAA7BzD,OAAOC,SAASyD,UAEc,UAA7B1D,OAAOC,SAASyD,UAEhB1D,OAAOC,SAASyD,SAASC,MACxB,2DCVHC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDuH5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAClCA,EAAaC","file":"static/js/main.d0600e0f.chunk.js","sourcesContent":["/* eslint-disable */\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { StreamChat } from 'stream-chat';\nimport ReactResizeDetector from 'react-resize-detector';\nimport {\n  Chat,\n  Channel,\n  MessageList,\n  MessageInput,\n  MessageInputFlat,\n  MessageSimple,\n  ChannelHeader,\n  ChannelPreviewMessenger,\n  InfiniteScrollPaginator,\n  ChannelListMessenger,\n  ChannelList,\n  Window,\n  Thread,\n  TypingIndicator,\n} from 'stream-chat-react';\nimport 'stream-chat-react/dist/css/index.css';\nimport './App.css';\n\nconst urlParams = new URLSearchParams(window.location.search);\n// const user =\n//   urlParams.get('user') || process.env.REACT_APP_CHAT_API_DEFAULT_USER;\nconst theme = urlParams.get('theme') || 'light';\n// const channelName = urlParams.get('channel') || 'demo';\n// const userToken =\n//   urlParams.get('user_token') ||\n//   process.env.REACT_APP_CHAT_API_DEFAULT_USER_TOKEN;\n\nclass App extends Component {\n  state = {\n    width: -1,\n  }\n  constructor(props) {\n    super(props);\n    this.chatClient = new StreamChat('qk4nn7rpcn75');\n    // if (process.env.REACT_APP_CHAT_SERVER_ENDPOINT) {\n    //   this.chatClient.setBaseURL(process.env.REACT_APP_CHAT_SERVER_ENDPOINT);\n    // }\n    this.chatClient.setUser(\n      {\n        id: 'example-user',\n      },\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiZXhhbXBsZS11c2VyIn0.HlC0dMKL43y3K_XbfvQS_Yc3V314HU4Z7LrBLil777g',\n    );\n  }\n\n  onResize = (parentWidth)=>{\n    this.setState({\n      width: parentWidth\n    });\n  }\n\n  render() {\n    const filters = { type: 'messaging' };\n    const sort = {\n      last_message_at: -1,\n      updated_at: -1,\n      cid: 1,\n    };\n    const options = { state: true, watch: true, presence: true };\n\n    return (\n      <Grid container direction={'column'}>\n        <Grid>\n          Header\n        </Grid>\n        <Grid>\n          Menu\n        </Grid>\n        <Grid>\n          <ReactResizeDetector handleWidth handleHeight onResize={this.onResize} />\n          <Chat client={this.chatClient} theme={`messaging ${theme}`}>\n            <ChannelList\n              List={ChannelListMessenger}\n              Preview={ChannelPreviewMessenger}\n              filters={filters}\n              sort={sort}\n              options={options}\n              Paginator={(props) => (\n                <InfiniteScrollPaginator threshold={300} {...props} />\n              )}\n            />\n            <Channel>\n              <Window>\n                <ChannelHeader />\n                <MessageList TypingIndicator={TypingIndicator} />\n                <MessageInput Input={MessageInputFlat} focus />\n              </Window>\n              <Thread Message={MessageSimple} />\n            </Channel>\n          </Chat>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n\t\t),\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit http://bit.ly/CRA-PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","/* eslint-disable */\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}